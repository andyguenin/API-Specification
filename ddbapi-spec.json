{
  "openapi": "3.0.2",
  "info": {
    "title": "Downtown Daily Bread Client Monitor",
    "description": "The Downtown Daily Bread Client Montior is used to monitor the use of services provided by Downtown Daily Bread organization.",
    "version": "1"
  },
  "servers": [
    {
      "url": "http://localhost:8090/api/v1",
      "description": "local server"
    }
  ],
  "paths": {
    "/client": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Returns all clients and their attributes",
        "responses": {
          "200": {
            "description": "an array of clients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/client/new": {
      "post": {
        "tags": [
          "client"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "attribName",
                    "attribValue"
                  ],
                  "properties": {
                    "attribName": {
                      "type": "string"
                    },
                    "attribValue": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": [
                {
                  "attribName": "name",
                  "attribValue": "Andy Guenin"
                },
                {
                  "attribName": "date_of_birth",
                  "attribValue": "1990-01-01"
                }
              ]
            }
          }
        },
        "summary": "Creates a new client",
        "responses": {
          "201": {
            "description": "successfully created the new client"
          },
          "400": {
            "description": "ClientInsertionError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientInsertionError",
                  "message": "Could not insert client"
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/client/{id}": {
      "get": {
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "client id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Gets the details about a specific client",
        "responses": {
          "200": {
            "description": "the client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          },
          "404": {
            "description": "could not find a client of the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientNotFound",
                  "message": "Could not find client with id 12345"
                }
              }
            }
          }
        }
      }
    },
    "/client/{id}/update": {
      "post": {
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "client id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Client"
              },
              "example": [
                {
                  "attribName": "name",
                  "attribValue": "Andy Guenin"
                },
                {
                  "attribName": "date_of_birth",
                  "attribValue": "1990-01-01"
                }
              ]
            }
          }
        },
        "summary": "Gets the details about a specific client",
        "responses": {
          "200": {
            "description": "the client with the updated fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "ClientInsertionError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientInsertionError",
                  "message": "Could not insert updated client records"
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          },
          "404": {
            "description": "could not find a client of the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientNotFound",
                  "message": "Could not find client with id 12345"
                }
              }
            }
          }
        }
      }
    },
    "/client/{id}/delete": {
      "post": {
        "tags": [
          "client"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "description": "client id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Deletes a client",
        "responses": {
          "200": {
            "description": "successfully deleted the client"
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          },
          "404": {
            "description": "could not find a client of the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientNotFound",
                  "message": "Could not find client with id 12345"
                }
              }
            }
          }
        }
      }
    },
    "/clientAttributeType": {
      "get": {
        "tags": [
          "client attribute type"
        ],
        "parameters": [],
        "summary": "Gets all of the client attribute types",
        "responses": {
          "200": {
            "description": "an array of all client attribute types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientAttributeType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/clientAttributeType/new": {
      "post": {
        "tags": [
          "client attribute type"
        ],
        "summary": "Creates a new client attribute type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClientAttributeType"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "the new client attribute type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientAttributeType"
                }
              }
            }
          },
          "400": {
            "description": "ClientAttributeTypeInsertionError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientAttributeTypeInsertionError",
                  "message": "Could not insert client attribute type"
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/clientAttributeType/{attribName}/update": {
      "post": {
        "tags": [
          "client attribute type"
        ],
        "summary": "updates a client attribute type based on its attribname",
        "description": "this endpoint should mostly be used to update the display name of the attribute.",
        "parameters": [
          {
            "name": "attribName",
            "in": "path",
            "required": "true",
            "description": "client attribute type id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientAttributeType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "an array of all client attribute types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientAttributeType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "ClientAttributeTypeInsertionError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientInsertionError",
                  "message": "Could not insert updated client attribute type records"
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          },
          "404": {
            "description": "could not find a client attribute type of the specified attribName",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "ClientAttributeTypeNotFound",
                  "message": "Could not find client attribute type with attribName 'fullname'"
                }
              }
            }
          }
        }
      }
    },
    "/clientAttributeType/{attribName}/delete": {
      "post": {
        "tags": [
          "client attribute type"
        ],
        "summary": "Deletes a client attribute type",
        "description": "This delete will not delete all client data associated with this attribute type. If you need to recover this data, re-create a clientattributetype with the same attribName",
        "parameters": [
          {
            "name": "attribName",
            "in": "path",
            "required": "true",
            "description": "client attribute type id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted the client attribute type"
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/service": {
      "get": {
        "tags": [
          "service"
        ],
        "summary": "Gets all services offered at Downtown Daily Bread",
        "responses": {
          "200": {
            "description": "an array of all services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "service": {
                        "$ref": "#/components/schemas/Service"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/service/new": {
      "post": {
        "tags": [
          "service"
        ],
        "summary": "Creates a new service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "the service has successfully been completed"
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/service/{serviceId}/schedule": {
      "get": {
        "tags": [
          "service"
        ],
        "summary": "Gets the schedules for a given service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": "true",
            "description": "service id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the schedules associated with this service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "the id of the schedule"
                      },
                      "schedule": {
                        "$ref": "#/components/schemas/Schedule"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/service/{serviceId}/schedule/new": {
      "post": {
        "tags": [
          "service"
        ],
        "summary": "Inserts a new schedule for a given service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": "true",
            "description": "service id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "the schedule has been created and associated with the specified service"
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    },
    "/service/{serviceId}/schedule/{scheduleId}/delete": {
      "post": {
        "tags": [
          "service"
        ],
        "summary": "Gets the specific schedule for a given service",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": "true",
            "description": "service id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheduleId",
            "in": "path",
            "required": "true",
            "description": "schedule id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the schedule has been deleted"
          },
          "401": {
            "description": "you are unauthorized to view this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized",
                  "message": "You are unauthorized to receive a response"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Schedule": {
        "type": "object",
        "required": [
          "rrule",
          "startTime",
          "endTime"
        ],
        "properties": {
          "rrule": {
            "type": "string",
            "description": "See https://github.com/jakubroztocil/rrule"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          }
        }
      },
      "Service": {
        "type": "object",
        "required": [
          "name",
          "type",
          "schedule"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "A service type is either of recurring or appointment. An recurring service is one that is open for clients to come in and out of whenever they need. They are scheduled according to a repeating schedule. An appointment service is a service that can be attended by a client, but is not specifically scheduled.",
            "enum": [
              "recurring",
              "appointment"
            ]
          }
        }
      },
      "ClientAttributeTypeDatatype": {
        "type": "string",
        "enum": [
          "string",
          "date",
          "int",
          "double"
        ]
      },
      "ClientAttributeType": {
        "type": "object",
        "required": [
          "id",
          "name",
          "datatype",
          "required",
          "requiredForOnboarding",
          "ordering"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description",
            "the short id that this field will be referred to internally. it should be relatively short, descriptive, and contain only letters, numbers, and underscores"
          },
          "name": {
            "type": "string"
          },
          "datatype": {
            "$ref": "#/components/schemas/ClientAttributeTypeDatatype"
          },
          "required": {
            "type": "boolean"
          },
          "requiredForOnboarding": {
            "type": "boolean"
          },
          "ordering": {
            "type": "integer"
          }
        }
      },
      "ClientAttribute": {
        "type": "object",
        "required": [
          "clientAttributeTypeId",
          "value"
        ],
        "properties": {
          "clientAttributeTypeId": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "Client": {
        "type": "object",
        "required": [
          "id",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAttribute"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "ClientAttributeTypeAlreadyExists",
              "ClientAttributeTypeInsertionError",
              "ClientAttributeTypeNotFound",
              "MissingData",
              "ClientNotFound",
              "ClientInsertionError",
              "Unauthorized"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "client",
      "description": "Client routes"
    },
    {
      "name": "client attribute type",
      "description": "Client attribute type routes"
    },
    {
      "name": "service",
      "description": "services offered by downtown daily bread"
    },
    {
      "name": "events",
      "description": "specific instances of services"
    },
    {
      "name": "schedule",
      "description": "a schedule"
    }
  ]
}
